{"version":3,"sources":["components/Navigation/components/NavDropItem/index.js","components/Navigation/index.js","containers/AlgorithmVisualiser/utils/index.js","containers/AlgorithmVisualiser/config/index.js","containers/AlgorithmVisualiser/components/Visualiser/index.js","containers/AlgorithmVisualiser/index.js","App.js","serviceWorker.js","index.js"],"names":["NavigationDropdownItem","onClick","type","name","NavDropdown","Item","key","Navigation","props","allAlgorithms","currentlySelectedAlgorithm","onAlgorithmChange","allAlgorithmsConfig","Navbar","bg","variant","Brand","href","title","NAME","id","Object","values","map","algo","sleep","ms","a","Promise","resolve","setTimeout","swap","arr","b","temp","partition","states","start","end","i","pivotValue","pivotIndex","ALGORITHMS","BUBBLE_SORT","QUICK_SORT","COCKTAIL_SORT","INSERTION_SORT","SHELL_SORT","SELECTION_SORT","GNOME_SORT","ALGORITHMS_CONFIG","COMPLEXITY","USE_ARRAY_FOR_DRAW","LOGIC","length","j","W","all","is_swapped","begin","value","increment","parseInt","len","min","position","window","valueArrays","item","AlgorithmVisualiser","setup","p5","canvasParentRef","w","createCanvas","parent","Array","floor","width","random","height","logic","draw","useArrayForDraw","background","noStroke","stroke","fill","rect","this","Component","App","state","newAlgorithm","setState","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.27f73eae.chunk.js","sourcesContent":["import React from 'react'\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\n\nconst NavigationDropdownItem = ( { onClick, type, name }) => {\n    return (\n        <NavDropdown.Item key={type} onClick={()=>{onClick(type)}}>\n           {name}\n        </NavDropdown.Item>\n    )\n}\n\nexport default NavigationDropdownItem","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\n//import Button from \"react-bootstrap/Button\";\nimport NavigationDropdownItem from \"./components/NavDropItem\";\n\nconst Navigation = props => {\n  const { allAlgorithms, currentlySelectedAlgorithm, onAlgorithmChange, allAlgorithmsConfig} = props;\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Sorting Algorithms</Navbar.Brand>\n        <NavDropdown title={ allAlgorithmsConfig[currentlySelectedAlgorithm].NAME || \"Select An Algorithm\" }id=\"basic-nav-dropdown\">\n          {Object.values(allAlgorithms).map((algo) => (\n            <NavigationDropdownItem\n              key={algo}\n              onClick={() => onAlgorithmChange(algo)}\n              type={algo}\n              name={allAlgorithmsConfig[algo].NAME}\n            />\n          ))}\n        </NavDropdown>\n      </Navbar>\n    </>\n  );\n};\n\nexport default Navigation;","export const sleep = async (ms) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport const swap = async (arr, a, b) => {\n  await sleep(25);\n  let temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n};\n\nexport const partition = async (arr, states, start, end) => {\n  for (let i = start; i < end; i++) {\n    states[i] = 1;\n  }\n\n  let pivotValue = arr[end];\n  let pivotIndex = start;\n  states[pivotIndex] = 0;\n\n  for (let i = start; i < end; i++) {\n    if (arr[i] < pivotValue) {\n      await swap(arr, i, pivotIndex);\n      states[pivotIndex] = -1;\n      pivotIndex++;\n      states[pivotIndex] = 0;\n    }\n  }\n\n  await swap(arr, pivotIndex, end);\n\n  for (let i = start; i < end; i++) {\n    if (i !== pivotIndex) {\n      states[i] = -1;\n    }\n  }\n\n  return pivotIndex;\n};\n\n","import { swap, partition, sleep } from \"../utils\";\n\nexport const ALGORITHMS = {\n  BUBBLE_SORT: \"BUBBLE_SORT\",\n  QUICK_SORT: \"QUICK_SORT\",\n  COCKTAIL_SORT: \"COCKTAIL_SORT\",\n  INSERTION_SORT: \"INSERTION_SORT\",\n  SHELL_SORT: \"SHELL_SORT\",\n  SELECTION_SORT: \"SELECTION_SORT\",\n  GNOME_SORT: \"GNOME_SORT\",\n};\n\nexport const ALGORITHMS_CONFIG = {\n  [ALGORITHMS.BUBBLE_SORT]: {\n    NAME: \"Bubble Sort\",\n    COMPLEXITY: \"The complexity of this algorithm is On^2. Bubble sort will start by comparing the first element of the array with the second element, if the first element is greater than the second element, it will swap both the elements, and then move on to compare the second and the third element, and so on.\",\n    USE_ARRAY_FOR_DRAW: false,\n    LOGIC: async (values, states) => {\n      for (let i = 0; i < values.length - 1; i++) {\n        for (let j = 0; j < values.length - i - 1; j++) {\n          let a = values[j];\n          let b = values[j + 1];\n          states[j + 1] = 0;\n          if (a > b) {\n            await swap(values, j, j + 1);\n          }\n          states[j] = -1;\n        }\n      }\n    },\n    W: 10\n  },\n  [ALGORITHMS.QUICK_SORT]: {\n    NAME: \"Quick Sort\",\n    COMPLEXITY: \"On average quick sort runs in O(n log n). This algorithm is using Lamuto Partition Scheme for selecting the pivot\",\n    USE_ARRAY_FOR_DRAW: false,\n    LOGIC: async (arr, states, start = 0, end = arr.length - 1) => {\n      if (start >= end) {\n        return;\n      }\n\n      let i = await partition(arr, states, start, end);\n\n      states[i] = -1;\n      await Promise.all([\n        ALGORITHMS_CONFIG[ALGORITHMS.QUICK_SORT].LOGIC(arr, states, start, i - 1),\n        ALGORITHMS_CONFIG[ALGORITHMS.QUICK_SORT].LOGIC(arr, states, i + 1, end)\n      ]);\n    },\n    W: 5\n  },\n  [ALGORITHMS.COCKTAIL_SORT]: {\n    NAME: \"Cocktail Sort\",\n    COMPLEXITY: \"The average time complexity of Cocktail Sort is O(n^2). Cocktail Sort is a variation of Bubble sort. The Bubble sort algorithm always traverses elements from left and moves the largest element to its correct position in first iteration and second largest in second iteration and so on. Cocktail Sort traverses through a given array in both directions alternatively.\",\n    USE_ARRAY_FOR_DRAW: false,\n    LOGIC: async (values, states) => {\n      var temp = 0;\n      var is_swapped = 1;\n      var begin = 0;\n      var end = values.length - 1;\n      var i;\n      while (is_swapped) {\n        is_swapped = 0;\n        for (i = begin; i < end; ++i) {\n          if (values[i] > values[i + 1]) {\n            states[i] = 0;\n            states[i + 1] = 1;\n            await sleep(5);\n            temp = values[i];\n            values[i] = values[i + 1];\n            values[i + 1] = temp;\n            is_swapped = 1;\n            states[i] = -1;\n            states[i + 1] = -1;\n          }\n        }\n        if (!is_swapped)\n          break;\n        is_swapped = 0;\n        for (i = end - 1; i >= begin; --i) {\n          if (values[i] > values[i + 1]) {\n            states[i] = 0;\n            states[i + 1] = 1;\n            await sleep(5);\n            temp = values[i];\n            values[i] = values[i + 1];\n            values[i + 1] = temp;\n            is_swapped = 1;\n            states[i] = -1;\n            states[i + 1] = -1;\n          }\n        }\n        begin = begin + 1;\n      }\n    },\n    W: 5\n  },\n  [ALGORITHMS.INSERTION_SORT]: {\n    NAME: \"Insertion Sort\",\n    COMPLEXITY: \"The complexity of this algorithm is O(n^2).Insertion sort is a sorting algorithm that places an unsorted element at its suitable place in each iteration.\",\n    USE_ARRAY_FOR_DRAW: false,\n    LOGIC: async (values, states) => {\n      for (var i = 0; i < values.length; i++) {\n        let value = values[i]\n        // store the current item value so it can be placed right\n        states[i + 1] = 0;\n        for (var j = i - 1; j > -1 && values[j] > value; j--) {\n          // loop through the items in the sorted array (the items from the current to the beginning)\n          // copy each item to the next one\n          values[j + 1] = values[j]\n          states[j + 1] = 1;\n        }\n        await sleep(100);\n        // the last item we've reached should now hold the value of the currently sorted item\n        values[j + 1] = value;\n        states[j + 1] = 0;\n      }\n    },\n    W: 5\n  },\n  [ALGORITHMS.SHELL_SORT]: {\n    NAME: \"Shell Sort\",\n    COMPLEXITY: \"The average time complexity of this algorithm is O(n log n) and worst case is (O n^2). In shell sort, elements at a specific interval are sorted. The interval between the elements is gradually decreased based on the sequence used.\",\n    USE_ARRAY_FOR_DRAW: false,\n    LOGIC: async (values, states) => {\n      var i = 0;\n      var increment = values.length / 2;\n      while (increment > 0) {\n        for (i = increment; i < values.length; i++) {\n          var j = i;\n          var temp = values[i];\n          states[i] = 1;\n\n          while (j >= increment && values[j - increment] > temp) {\n            states[j - increment] = 0;\n            values[j] = values[j - increment];\n            j = j - increment;\n            await sleep(50);\n          }\n          for (let i = 0; i < states.length; i++) {\n            if (states[i] === 0)\n              states[i] = -1;\n          }\n          states[i] = -1;\n          values[j] = temp;\n\n        }\n        if (increment === 2) {\n          increment = 1;\n        } else {\n          increment = parseInt(increment * 5 / 11);\n        }\n      }\n      for (let i = 0; i < states.length; i++) {\n        states[i] = -1;\n      }\n    },\n    W: 5\n  },\n  [ALGORITHMS.SELECTION_SORT]: {\n    NAME: \"Selection Sort\",\n    COMPLEXITY: \"The complexity of this algorithm is O(n^2).The selection sort algorithm sorts an array by repeatedly finding the minimum element from unsorted part and putting it at the beginning\",\n    USE_ARRAY_FOR_DRAW: false,\n    LOGIC: async (values, states) => {\n      var i=0; var j=0;\n      var len = values.length,min;\n      for (i = 0; i < len; i++) {\n        //set minimum to this position\n        min = i;\n        //check the rest of the array to see if anything is smaller\n        for (j = i + 1; j < len; j++) {\n          if (values[j] < values[min]) {\n            min = j;\n          }\n        }\n        states[min] = 0;\n        //if the minimum isn't in the position, swap it\n        if (i !== min) {\n          await swap(values, i, min);\n        }\n        states[min] = -1; \n        states[i] = 0;\n      }\n    },\n    W: 5\n  },\n  [ALGORITHMS.GNOME_SORT]: {\n    NAME: \"Gnome Sort\",\n    COMPLEXITY: \"The complexity of this algorithm is O(n^2).The algorithm always finds the first place where two adjacent elements are in the wrong order, and swaps them. It takes advantage of the fact that performing a swap can introduce a new out-of-order adjacent pair only next to the two swapped elements.\",\n    USE_ARRAY_FOR_DRAW: true,\n    LOGIC: async (values, states) => {\n      debugger;\n      var position = 1;\n      window.valueArrays = [];\n  \n      if ( values ) {\n        window.valueArrays = values.map(function(item) { return item; });\n      }\n      \n      while ( position < values.length ) {\n        if ( window.valueArrays[position] >= window.valueArrays[position - 1] ) {\n          position++;\n        }\n        else {\n          await swap(window.valueArrays, position, position - 1);\n          states[position] = 1;\n          if ( position > 1 ) {\n            position--;\n          }    \n        }\n        states[position] = -1;\n      }\n      for(let i = 0;i<values.length;i++){\n        states[i]=-1;\n      }\n      \n      return window.valueArrays;\n    },\n    W: 5\n  },\n};\n","import React, { Component } from \"react\";\r\nimport Sketch from \"react-p5\";\r\n\r\nexport default class AlgorithmVisualiser extends Component {\r\n  states = [];\r\n  values = [];\r\n\r\n\r\n  setup = ({ p5, canvasParentRef, w = 10 }) => {\r\n    window.valueArrays = []\r\n    p5.createCanvas(1000, 500).parent(canvasParentRef);\r\n\r\n    this.values = new Array(p5.floor(p5.width / w));\r\n    this.valueArrays = window.valueArrays\r\n    this.states = [];\r\n    for (let i = 0; i < this.values.length; i++) {\r\n      this.values[i] = p5.random(p5.height);\r\n      this.states[i] = -1;\r\n    }\r\n\r\n    this.props.logic(this.values, this.states);\r\n  };\r\n\r\n  draw = ({ p5, w }) => {\r\n    const { useArrayForDraw } = this.props;\r\n    p5.background(0);\r\n    if (useArrayForDraw) {\r\n      debugger;\r\n      for (let i = 0; i < window.valueArrays.length; i++) {\r\n        p5.noStroke();\r\n        p5.stroke(100, 143, 143);\r\n        if (this.states[i] === 0) { \r\n          window.valueArrays = [];\r\n          p5.fill(255, 0, 0);\r\n        } else if (this.states[i] === 1) {\r\n          p5.fill(0, 255, 0);\r\n        } else p5.fill(100);\r\n        p5.rect(i * w, p5.height, w, - window.valueArrays[i], 20);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.values.length; i++) {\r\n        p5.noStroke();\r\n        p5.stroke(100, 143, 143);\r\n        if (this.states[i] === 0) {\r\n          p5.fill(255, 0, 0);\r\n        } else if (this.states[i] === 1) {\r\n          p5.fill(0, 255, 0);\r\n        } else p5.fill(100);\r\n        p5.rect(i * w, p5.height, w, -this.values[i], 20);\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { w } = this.props;\r\n\r\n    return (\r\n      <Sketch\r\n        setup={(p5, canvasParentRef) =>\r\n          this.setup({\r\n            p5,\r\n            canvasParentRef,\r\n            w,\r\n          })\r\n        }\r\n        draw={(p5) =>\r\n          this.draw({\r\n            p5,\r\n            w,\r\n          })\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { ALGORITHMS, ALGORITHMS_CONFIG } from \"./config\";\nimport Visualiser from \"./components/Visualiser\";\n\nexport default class AlgorithmVisualiser extends Component {\n  render() {\n    const { currentlySelectedAlgorithm } = this.props;\n    return (\n      <Visualiser\n        logic={ALGORITHMS_CONFIG[currentlySelectedAlgorithm].LOGIC}\n        w={ALGORITHMS_CONFIG[currentlySelectedAlgorithm].W}\n        useArrayForDraw={ALGORITHMS_CONFIG[currentlySelectedAlgorithm].USE_ARRAY_FOR_DRAW}\n      />\n    );\n  }\n}\n\nexport { ALGORITHMS, ALGORITHMS_CONFIG };\n\n\n","import React, { Component } from \"react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Navigation from \"./components/Navigation\";\n\nimport AlgorithmVisualiser, {\n  ALGORITHMS,\n  ALGORITHMS_CONFIG,\n} from \"./containers/AlgorithmVisualiser\";\n\nimport \"./App.css\";\n\nexport default class App extends Component {\n  state = {\n    currentlySelectedAlgorithm: ALGORITHMS.BUBBLE_SORT,\n  };\n\n  onAlgorithmChange = (newAlgorithm) => {\n    this.setState({\n      currentlySelectedAlgorithm: newAlgorithm,\n    });\n  };\n\n  render() {\n    const { currentlySelectedAlgorithm } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Navigation\n          allAlgorithms={ALGORITHMS}\n          allAlgorithmsConfig={ALGORITHMS_CONFIG}\n          onAlgorithmChange={this.onAlgorithmChange}\n          currentlySelectedAlgorithm={currentlySelectedAlgorithm}\n        />\n\n        <header className=\"App-header\">\n          <h1> {ALGORITHMS_CONFIG[currentlySelectedAlgorithm].NAME}</h1>\n          {ALGORITHMS_CONFIG[currentlySelectedAlgorithm].COMPLEXITY}\n          <AlgorithmVisualiser\n            key={currentlySelectedAlgorithm}\n            currentlySelectedAlgorithm={currentlySelectedAlgorithm}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}